plugins {
    // id 'war'
    id 'java'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.springframework.boot' version '3.4.3'
    id 'net.nemerosa.versioning' version '3.1.0'
    id 'com.bmuschko.docker-remote-api' version '9.3.4'
}


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

def profile = parent.ext.get('profile')
def imageVersion = project.property('docker.image.version')
def imageVersionWithProfile = "$imageVersion-$profile"
def jarName = "$project.name-$imageVersion" + ".jar"
def dockerHost = project.property('docker.host')
def dockerRepo = project.property('docker.repo')
def dockerBuildDir = 'build/docker/'
def dockerWorkingDir = project.property('docker.work.dir') + "/twins"
def appName = 'twins'
def uniqueContainerName = "$dockerHost/$dockerRepo$appName:$imageVersionWithProfile"


println "Using profile [${profile}]"
project.version = imageVersion

repositories {
    mavenCentral()
    gradlePluginPortal()

}

docker {
    registryCredentials {
        url = "https://${dockerHost}/"
    }
}

task createDockerfile(type: Dockerfile) {
    dependsOn("bootJar")
    destFile.set(project.file("$dockerBuildDir/Dockerfile"))

    from("bellsoft/liberica-openjre-alpine:21.0.5")
    runCommand("mkdir -p $dockerWorkingDir/logs")
    workingDir(".$dockerWorkingDir")
    addFile("$jarName", "$dockerWorkingDir/twins.jar")
    entryPoint("java")
    defaultCommand("-jar", "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED", "-Dapp.home=$dockerWorkingDir", "$dockerWorkingDir/twins.jar")
    exposePort(8443)
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn("createDockerfile")
    doFirst {
        println("copy File begin")
        copy {
            from("build/libs")
            into(dockerBuildDir)
            include("*.jar")
        }
        println("copy File end")
    }
    inputDir.set(project.file(dockerBuildDir))
    images.add(uniqueContainerName)
}

task pushDockerImage(type: DockerBuildImage) {
    dependsOn("buildDockerImage")
    doLast {
        exec {
            executable("docker")
            args("push", "$uniqueContainerName")
        }
        println("Executed!")
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    implementation("org.springframework:spring-web")
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude group: "org.apache.httpcomponents", module: "httpclient"
        exclude module: "spring-boot-starter-tomcat"
        exclude module: "spring-boot-starter-jetty"
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude module: "tomcat-embed-el"
        exclude group: "org.apache.tomcat"
    }
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.security:spring-security-crypto'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation('com.github.ben-manes.caffeine:caffeine')
    implementation('org.springframework.boot:spring-boot-starter-undertow')
    implementation("org.springframework.amqp:spring-rabbit")
    implementation("org.springframework.amqp:spring-amqp")
    implementation("org.apache.httpcomponents.client5:httpclient5:5.4.2")
    implementation("org.springframework.boot:spring-boot-starter-jdbc") {
        exclude group: "com.zaxxer", module: "HikariCP"
    }
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    runtimeOnly("org.postgresql:postgresql:42.7.4")
    implementation('org.hibernate:hibernate-core:6.4.1.Final')
    implementation('io.hypersistence:hypersistence-utils-hibernate-63:3.9.0')
    implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation group: 'commons-validator', name: 'commons-validator', version: '1.8.0'
    implementation group: 'com.google.guava', name: 'guava', version: '32.1.3-jre'
    implementation 'org.flywaydb:flyway-core:11.0.0'
    implementation 'org.flywaydb:flyway-database-postgresql:11.0.0'
    implementation 'org.cache2k:cache2k-api:2.6.1.Final', 'org.cache2k:cache2k-core:2.6.1.Final', 'org.cache2k:cache2k-spring:2.6.1.Final'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.apache.tika:tika-core:3.0.0'
    implementation 'io.github.breninsul:io-stream-commons:1.0.2'
    implementation 'io.github.breninsul:log-time-aspect-starter:1.0.1'
    implementation 'io.minio:minio:8.5.12'
    implementation 'org.jasypt:jasypt:1.9.3'
    implementation 'com.alcosi:alcosi-identity-server-communication-error-parser:1.00-RELEASE'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

configurations {
    runtime.exclude group: "com.zaxxer", module: "HikariCP"
}


jar {
    setZip64(true)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                'Main-Class': "org.twins.core.Application",
                'Built-By': System.properties['user.name'],
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Build-Revision': versioning.info.commit ?: 'unknown',
                'Build-Display': versioning.info.display ?: 'unknown',
                'Build-Tag': versioning.info.tag ?: 'unknown',
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task createManifest { //task for manifest.mf file creation on local run from IDE
    doLast {
        def manifestDir = file("$projectDir/src/main/resources/META-INF")
        def manifestFile = file("$manifestDir/MANIFEST.MF")
        if (!manifestDir.exists()) {
            manifestDir.mkdirs()
        }
        manifestFile.text =
"""Main-Class: org.twins.core.Application
Built-By: ${System.properties['user.name']}
Build-Timestamp: ${new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())}
Build-Revision: ${versioning.info.commit}
Build-Display: ${versioning.info.display}
Build-Tag: ${versioning.info.tag}
Created-By: Gradle ${gradle.gradleVersion}
Build-Jdk: ${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})
Build-OS: ${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}
""".trim() + "\n"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
