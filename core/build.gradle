plugins {
    // id 'war'
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'net.nemerosa.versioning' version '2.8.2'
    id 'com.bmuschko.docker-remote-api' version '9.3.0'

}

import com.bmuschko.gradle.docker.tasks.image.*

def imageVersion = '1.0.0'
def dockerBuildDir = 'build/docker/'
def appName = 'twins'
def uniqueContainerName = "dockerhub.esas.by/$appName:$imageVersion"

repositories {
    mavenCentral()
    gradlePluginPortal()

}

docker {
    registryCredentials {
    }
}

task createDockerfile(type: Dockerfile) {
    dependsOn("bootJar")
    destFile.set(project.file("$dockerBuildDir/Dockerfile"))

    from("bellsoft/liberica-openjdk-alpine:20-x86_64")
    runCommand("mkdir -p /opt/elpmee/gateway")
    runCommand("mkdir /opt/elpmee/gateway/logs")
    workingDir("./opt/elpmee/gateway")
    addFile("gateway-1.0.0-SNAPSHOT.jar", "/opt/elpmee/gateway/elpmee-gateway.jar")
    entryPoint("java")
    defaultCommand("-jar", "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED", "-Dapp.home=/opt/elpmee/gateway/", "/opt/elpmee/gateway/elpmee-gateway.jar")
    exposePort(8080)
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn("createDockerfile")
    doFirst {
        println("copy File begin")
        copy {
            from("build/libs")
            into(dockerBuildDir)
            include("*.jar")
        }
        println("copy File end")
    }
    inputDir.set(project.file(dockerBuildDir))
    images.add(uniqueContainerName)
}

task pushDockerImage(type: DockerBuildImage) {
    dependsOn("buildDockerImage")
    doLast {
        exec {
            executable("docker")
            args("push", "$uniqueContainerName")
        }
        println("Executed!")
    }
}

dependencies {
    implementation("com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter") {
        exclude module: "spring-boot-starter-tomcat"
        exclude module: "tomcat-embed-el"
        exclude group: "org.apache.tomcat"
    }
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    implementation("org.springframework:spring-web:6.0.11")
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.13.0'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation("org.springframework.boot:spring-boot-starter-web:3.1.0") {
        exclude module: "spring-boot-starter-tomcat"
        exclude module: "spring-boot-starter-jetty"
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude module: "tomcat-embed-el"
        exclude group: "org.apache.tomcat"
    }
    implementation('org.springframework.boot:spring-boot-starter-undertow:3.1.0')
    implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server:3.1.0")
    implementation("org.apache.commons:commons-lang3:3.12.0")
    runtimeOnly("com.nimbusds:oauth2-oidc-sdk:8.19")
    implementation("org.springframework.amqp:spring-rabbit:3.0.7")
    implementation("org.springframework.amqp:spring-amqp:3.0.7")
    implementation("org.apache.httpcomponents:httpclient:4.5.12")
    implementation("org.apache.httpcomponents.client5:httpclient5:5.2.1")
    implementation("org.springframework.boot:spring-boot-starter-jdbc:3.1.0") {
        exclude group: "com.zaxxer", module: "HikariCP"
    }
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:3.1.0") {
        exclude group: "com.zaxxer", module: "HikariCP"
    }
    runtimeOnly("org.postgresql:postgresql:42.6.0")
    implementation('org.hibernate:hibernate-core:6.2.7.Final')
    implementation('io.hypersistence:hypersistence-utils-hibernate-62:3.5.1')
}

configurations {
    runtime.exclude group: "com.zaxxer", module: "HikariCP"
}


jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        // attributes "Main-Class": "pro.atomicon.searcher.Application"
        attributes(
                'Main-Class': "com.elpmee.gateway.Application",
                'Built-By': System.properties['user.name'],
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Build-Revision': versioning.info.commit,
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}